<export><workspace name="geo-ip"><query name="Basic nearest match search" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

import module namespace functx = "http://www.functx.com" at "/MarkLogic/functx/functx-1.0-nodoc-2007-01.xqy";

(: The goal is to do something like this: 
&lt;Response&gt;
&lt;IP&gt;92.26.223.198&lt;/IP&gt;
&lt;CountryCode&gt;GB&lt;/CountryCode&gt;
&lt;CountryName&gt;United Kingdom&lt;/CountryName&gt;
&lt;RegionCode/&gt;
&lt;RegionName/&gt;
&lt;City/&gt;
&lt;ZipCode/&gt;
&lt;TimeZone&gt;Europe/London&lt;/TimeZone&gt;
&lt;Latitude&gt;51.4964&lt;/Latitude&gt;
&lt;Longitude&gt;-0.1224&lt;/Longitude&gt;
&lt;MetroCode&gt;0&lt;/MetroCode&gt;
&lt;/Response&gt;
:)

(:
cts:search(doc(), cts:element-value-query(xs:QName("city_name"), "London"))
:)

declare variable $IPv4 as xs:string+ := ("43.230.176.243", "212.58.246.93", "139.130.4.5", "54.240.195.68", "74.125.224.72", 
"151.111.166.96", "170.149.161.130", "54.240.254.230", "78.41.128.140", "62.138.116.25", "54.239.54.107", "95.130.42.33", 
"147.67.119.103", "205.193.215.159", "31.192.231.167", "195.66.10.19", "193.146.141.234", "54.239.38.117", "54.239.96.90", 
"177.72.244.194", "52.95.193.28", "54.240.226.81", "52.95.80.34", "194.150.245.142");

declare variable $SEARCH-IP as xs:string := functx:substring-before-last($IPv4, '.');

declare function local:find-matching-ip-data($ipaddr as xs:string) as item()* {
  cts:search(doc(), cts:element-word-query(xs:QName("network"), functx:substring-before-last($ipaddr, '.')))
};

declare function local:nearest-match($items as item()*, $i as xs:string?) {
  if(empty($items))
  then(element error {"no match for "||$i})
  else (
    element search{$i},
    (: fn:root(($items//accuracy_radius[. eq min($items//accuracy_radius) ])[1]) :)
    $items
  
  )
   (: for $item in $items  
   where some $item in $items satisfies min($item//accuracy_radius)
   return $item :)
   
};

declare function local:get-geoname-by-id($id as xs:string) {
  cts:search(doc(), cts:element-value-query(xs:QName("geoname_id"), $id))
};

for $i in $IPv4
return local:nearest-match(local:find-matching-ip-data($i), $i)



 </query><query name="Query 2" focus="false" active="false" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

for $i in cts:search(doc(), cts:element-value-query(xs:QName("geoname_id"), "2635167"))
return fn:local-name($i)</query><query name="Broken" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

import module namespace functx = "http://www.functx.com" at "/MarkLogic/functx/functx-1.0-nodoc-2007-01.xqy";

(: The goal is to do something like this: 
&lt;Response&gt;
&lt;IP&gt;92.26.223.198&lt;/IP&gt;
&lt;CountryCode&gt;GB&lt;/CountryCode&gt;
&lt;CountryName&gt;United Kingdom&lt;/CountryName&gt;
&lt;RegionCode/&gt;
&lt;RegionName/&gt;
&lt;City/&gt;
&lt;ZipCode/&gt;
&lt;TimeZone&gt;Europe/London&lt;/TimeZone&gt;
&lt;Latitude&gt;51.4964&lt;/Latitude&gt;
&lt;Longitude&gt;-0.1224&lt;/Longitude&gt;
&lt;MetroCode&gt;0&lt;/MetroCode&gt;
&lt;/Response&gt;
:)

(:
cts:search(doc(), cts:element-value-query(xs:QName("city_name"), "London"))
:)

declare variable $IPv4 as xs:string := "146.198.";
declare variable $SEARCH-IP as xs:string := functx:substring-before-last($IPv4, '.');

declare function local:find-matching-ip-data($ipaddr as xs:string) as item()* {
  cts:search(doc(), cts:element-word-query(xs:QName("network"), functx:substring-before-last($ipaddr, '.')))
};

declare function local:nearest-match($items as item()*) {
  fn:root($items//accuracy_radius[. eq min($items//accuracy_radius) ]) 
   (: for $item in $items  
   where some $item in $items satisfies min($item//accuracy_radius)
   return $item :)
   
};

declare function local:get-geoname-by-id($id as xs:string) {
  cts:search(doc(), cts:element-value-query(xs:QName("geoname_id"), $id))
};

local:nearest-match(local:find-matching-ip-data($IPv4))



 

</query><query name="GMaps link" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

declare function local:nearest-match($items as item()*) {
  fn:root($items//accuracy_radius[. eq min($items//accuracy_radius) ]) 
   (: for $item in $items  
   where some $item in $items satisfies min($item//accuracy_radius)
   return $item :)
   
};

declare function local:gmaps-link($item) {
  (:"http://maps.google.com/?q="||$item//latitude||","||$item//longitude :)
  "https://maps.googleapis.com/maps/api/staticmap?center="||$item//latitude||","||$item//longitude||"&amp;amp;zoom=13&amp;amp;size=300x300"
};

local:gmaps-link(local:nearest-match(cts:search(doc(), cts:element-value-query(xs:QName("network"), "43.230.176.*", "wildcarded"))))



</query><query name="Look up regional info" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

(:
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;GeoLite2-City-Blocks-IPv4&gt;
  &lt;is_anonymous_proxy&gt;0&lt;/is_anonymous_proxy&gt;
  &lt;registered_country_geoname_id&gt;2635167&lt;/registered_country_geoname_id&gt;
  &lt;represented_country_geoname_id/&gt;
  &lt;latitude&gt;51.5142&lt;/latitude&gt;
  &lt;is_satellite_provider&gt;0&lt;/is_satellite_provider&gt;
  &lt;accuracy_radius&gt;5&lt;/accuracy_radius&gt;
  &lt;postal_code&gt;EC4N&lt;/postal_code&gt;
  &lt;network&gt;146.198.247.0/24&lt;/network&gt;
  &lt;geoname_id&gt;2643743&lt;/geoname_id&gt;
  &lt;longitude&gt;-0.0931&lt;/longitude&gt;
&lt;/GeoLite2-City-Blocks-IPv4&gt;
:)

declare function local:nearest-match($items as item()*) {
  fn:root($items//accuracy_radius[. eq min($items//accuracy_radius) ]) 
   (: for $item in $items  
   where some $item in $items satisfies min($item//accuracy_radius)
   return $item :)
   
};

declare function local:gmaps-link($item) {
  (:"http://maps.google.com/?q="||$item//latitude||","||$item//longitude :)
  "https://maps.googleapis.com/maps/api/staticmap?center="||$item//latitude||","||$item//longitude||"&amp;amp;zoom=13&amp;amp;size=300x300"
};

(: works
cts:search((//GeoLite2-City-Locations-en), cts:element-value-query(xs:QName("geoname_id"), "2643743"))[1 to 100]
:)

(: Resolves all international variants :)
cts:search(doc(), 
  cts:and-query((
    cts:element-value-query(xs:QName("geoname_id"), "2077456"),
    cts:not-query((  
      cts:element-query(xs:QName("GeoLite2-City-Blocks-IPv4"), cts:and-query(())),
      cts:element-query(xs:QName("GeoLite2-Country-Blocks-IPv4"), cts:and-query(())),
      cts:element-query(xs:QName("GeoLite2-City-Blocks-IPv6"), cts:and-query(())),
      cts:element-query(xs:QName("GeoLite2-Country-Blocks-IPv6"), cts:and-query(()))
    ))
  ))
)[1 to 10]



</query><query name="Test Planning" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

(: 
  TODO:
  TEST IPs - the following IP addresses should all load the correct flag(s) in order for tests to pass...

UK:  http://freegeoip.net/xml/212.58.246.93
AUS:  http://freegeoip.net/xml/139.130.4.5
      http://freegeoip.net/xml/54.240.195.68
      http://freegeoip.net/xml/43.230.176.243

US: http://freegeoip.net/xml/74.125.224.72
    http://freegeoip.net/xml/151.111.166.96
    http://freegeoip.net/xml/170.149.161.130
    http://freegeoip.net/xml/54.240.254.230
FR: http://freegeoip.net/xml/78.41.128.140
DE:  http://freegeoip.net/xml/62.138.116.25
    http://freegeoip.net/xml/54.239.54.107
BE:  http://freegeoip.net/xml/95.130.42.33
    http://freegeoip.net/xml/147.67.119.103 (EU GOVT)
CA: http://freegeoip.net/xml/205.193.215.159
SE: http://freegeoip.net/xml/31.192.231.167
IT: http://freegeoip.net/xml/195.66.10.19
ES: http://freegeoip.net/xml/193.146.141.234
IE:  http://freegeoip.net/xml/54.239.38.117
JA:  http://freegeoip.net/xml/54.239.96.90
BR:  http://freegeoip.net/xml/177.72.244.194
KR: http://freegeoip.net/xml/52.95.193.28
SG:  http://freegeoip.net/xml/54.240.226.81
IN:  http://freegeoip.net/xml/52.95.80.34
CH: http://freegeoip.net/xml/194.150.245.142

:)
</query><query name="Query 3" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

import module namespace functx = "http://www.functx.com" at "/MarkLogic/functx/functx-1.0-nodoc-2007-01.xqy";

(: The goal is to do something like this: 
&lt;Response&gt;
&lt;IP&gt;92.26.223.198&lt;/IP&gt;
&lt;CountryCode&gt;GB&lt;/CountryCode&gt;
&lt;CountryName&gt;United Kingdom&lt;/CountryName&gt;
&lt;RegionCode/&gt;
&lt;RegionName/&gt;
&lt;City/&gt;
&lt;ZipCode/&gt;
&lt;TimeZone&gt;Europe/London&lt;/TimeZone&gt;
&lt;Latitude&gt;51.4964&lt;/Latitude&gt;
&lt;Longitude&gt;-0.1224&lt;/Longitude&gt;
&lt;MetroCode&gt;0&lt;/MetroCode&gt;
&lt;/Response&gt;
:)

(:
cts:search(doc(), cts:element-value-query(xs:QName("city_name"), "London"))
:)

declare variable $IPv4 as xs:string := "123.192";
declare variable $SEARCH-IP as xs:string := functx:substring-before-last($IPv4, '.');

declare function local:find-matching-ip-data($ipaddr as xs:string) as item()* {
  cts:search(doc(), cts:element-word-query(xs:QName("network"), functx:substring-before-last($ipaddr, '.')))
};

declare function local:nearest-match($items as item()*) {
  fn:root($items//accuracy_radius[. eq min($items//accuracy_radius) ]) 
   (: for $item in $items  
   where some $item in $items satisfies min($item//accuracy_radius)
   return $item :)
   
};

declare function local:get-geoname-by-id($id as xs:string) {
  cts:search(doc(), cts:element-value-query(xs:QName("geoname_id"), $id))
};

local:nearest-match(local:find-matching-ip-data($IPv4))



 

</query><query name="Basic Search Flow" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

import module namespace functx = "http://www.functx.com" at "/MarkLogic/functx/functx-1.0-nodoc-2007-01.xqy";

declare variable $IPv4 as xs:string+ := ("43.230.176.243", "212.58.246.93", "139.130.4.5", "54.240.195.68", "74.125.224.72", 
"151.111.166.96", "170.149.161.130", "54.240.254.230", "78.41.128.140", "62.138.116.25", "54.239.54.107", "95.130.42.33", 
"147.67.119.103", "205.193.215.159", "31.192.231.167", "195.66.10.19", "193.146.141.234", "54.239.38.117", "54.239.96.90", 
"177.72.244.194", "52.95.193.28", "54.240.226.81", "52.95.80.34", "194.150.245.142");

declare variable $SEARCH-IP as xs:string := functx:substring-before-last($IPv4, '.');

declare function local:find-matching-ip-data($ipaddr as xs:string) as item()* {
  let $candidates :=
  (: First try searching for three segments [xxx.xxx.xxx.*] :)
  if (count(cts:search(doc(), cts:element-value-query(xs:QName("network"), xs:string(functx:substring-before-last($ipaddr, '.')||"*"), "wildcarded"))) eq 0)
  (: If there are no matches, try the just the first two segments [xxx.xxx.*] :)
  then (cts:search(doc(), cts:element-value-query(xs:QName("network"), xs:string(functx:substring-before-last(functx:substring-before-last($ipaddr, '.'),'.')||"*"), "wildcarded"))) 
  else (cts:search(doc(), cts:element-value-query(xs:QName("network"), xs:string(functx:substring-before-last($ipaddr, '.')||"*"), "wildcarded")))
  (: get all matches and get the most frequent geoname id :)
  let $sequence := $candidates/GeoLite2-City-Blocks-IPv4/geoname_id
  let $highest-match := for $maxFreq in max(for $val in distinct-values($sequence) return count(index-of($sequence, $val))) return distinct-values($sequence)[count(index-of($sequence, .)) eq $maxFreq]
  return $candidates[//geoname_id/. eq $highest-match]
};

declare function local:nearest-match($items as item()*, $i as xs:string?) {
  fn:root(($items//accuracy_radius[. eq min($items//accuracy_radius) ])[1]) 
   (: for $item in $items  
   where some $item in $items satisfies min($item//accuracy_radius)
   return $item :)
   
};

declare function local:gmaps-link($item) {
  (:"http://maps.google.com/?q="||$item//latitude||","||$item//longitude :)
  "https://maps.googleapis.com/maps/api/staticmap?center="||$item//latitude||","||$item//longitude||"&amp;amp;zoom=13&amp;amp;size=450x300"
};

declare function local:create-flag-link($item as xs:string) {
  element img {attribute src {"/assets/images/flags/"||$item||".png"}}
};

declare function local:get-geoname-id($item as xs:string) {
  cts:search((//GeoLite2-City-Locations-en), cts:element-value-query(xs:QName("geoname_id"), $item))
};

declare function local:get-country-geoname-id($item as xs:string) {
  cts:search( (//GeoLite2-Country-Locations-en), cts:element-value-query(xs:QName("geoname_id"), $item))
};

(:
xs:string(functx:substring-before-last(functx:substring-before-last($IPv4, '.'),'.')||"*"),
xs:string(functx:substring-before-last($IPv4, '.')||"*") :)

(:
local:gmaps-link(local:nearest-match(local:find-matching-ip-data($IPv4))) :)


for $i in $IPv4
let $match := local:nearest-match(local:find-matching-ip-data($i), $i)
let $country := local:get-country-geoname-id($match//registered_country_geoname_id)
let $city := local:get-geoname-id($match//geoname_id)
return (
  element data {
    element ip {$i},
    element gmaps {local:gmaps-link($match)},
    element flag {local:create-flag-link(fn:lower-case(xs:string($country//country_iso_code)))},
    $match, 
    $country, 
    $city
  }
)


(:
let $ipmatch := local:nearest-match(local:find-matching-ip-data($IPv4[1]), $IPv4[1])
return ($ipmatch, local:get-country-geoname-id($ipmatch//registered_country_geoname_id), local:get-geoname-id($ipmatch//geoname_id))
:)</query><query name="Query 4" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

import module namespace functx = "http://www.functx.com" at "/MarkLogic/functx/functx-1.0-nodoc-2007-01.xqy";

declare variable $IPv4 as xs:string+ := ("43.230.176.243", "212.58.246.93", "139.130.4.5", "54.240.195.68", "74.125.224.72", 
"151.111.166.96", "170.149.161.130", "54.240.254.230", "78.41.128.140", "62.138.116.25", "54.239.54.107", "95.130.42.33", 
"147.67.119.103", "205.193.215.159", "31.192.231.167", "195.66.10.19", "193.146.141.234", "54.239.38.117", "54.239.96.90", 
"177.72.244.194", "52.95.193.28", "54.240.226.81", "52.95.80.34", "194.150.245.142");

declare variable $SEARCH-IP as xs:string := functx:substring-before-last($IPv4, '.');


for $i in $IPv4 return
count(
cts:search(doc(),
cts:element-value-query(
xs:QName("network"),
(functx:substring-before-last(functx:substring-before-last($i, '.'),'.')||"*"),
"wildcarded"
))
)</query><query name="Query 5" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

import module namespace functx = "http://www.functx.com" at "/MarkLogic/functx/functx-1.0-nodoc-2007-01.xqy";

declare variable $IP := "52.95.80.34";

declare function local:find-matching-ip-data($ipaddr as xs:string) as item()* {
  let $candidates :=
  (: First try searching for three segments [xxx.xxx.xxx.*] :)
  if (count(cts:search(doc(), cts:element-value-query(xs:QName("network"), xs:string(functx:substring-before-last($ipaddr, '.')||"*"), "wildcarded"))) eq 0)
  (: If there are no matches, try the just the first two segments [xxx.xxx.*] :)
  then ("here") (: cts:search(doc(), cts:element-value-query(xs:QName("network"), xs:string(functx:substring-before-last(functx:substring-before-last($ipaddr, '.'),'.')||"*"), "wildcarded"))) :)
  else ("there")(: cts:search(doc(), cts:element-value-query(xs:QName("network"), xs:string(functx:substring-before-last($ipaddr, '.')||"*"), "wildcarded"))) :)
  (: get all matches and get the most frequent geoname id :)
  return $candidates
  (:let $sequence := $candidates/GeoLite2-City-Blocks-IPv4/geoname_id
  let $highest-match := for $maxFreq in max(for $val in distinct-values($sequence) return count(index-of($sequence, $val))) return distinct-values($sequence)[count(index-of($sequence, .)) eq $maxFreq]
  return $candidates  [//geoname_id/. eq $highest-match] :)
};

xdmp:estimate(
cts:search(doc(), cts:element-value-query(xs:QName("network"), xs:string(functx:substring-before-last($IP, '.')||"*"), "wildcarded"))
)
</query><query name="Query 6" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

(//GeoLite2-Country-Locations-en)[1 to 10]</query><query name="Query 7" focus="false" active="true" content-source="14369746076098578715:0:Apps" mode="xquery">xquery version "1.0-ml";

import module namespace admin = "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";

declare variable $DATABASE as xs:string := "GeoIP";
declare variable $PORT as xs:unsignedLong := 8086;
declare variable $PATH := "/ROOT/PATH/TO/ml-geo-ip/src/main/xquery";

declare function local:create-http-application-server() {
  let $config := admin:get-configuration()
  let $config := admin:http-server-create($config, admin:group-get-id($config, "Default"), fn:concat("http-",$PORT),
        $PATH, $PORT, 0, xdmp:database($DATABASE))
(:  let $config := admin:appserver-set-authentication($config,
         admin:appserver-get-id($config, admin:group-get-id($config, "Default"), fn:concat("http-",$PORT)),
         "application-level") :)
  return
  admin:save-configuration($config)
};

local:create-http-application-server()</query><query name="New Search Flow" focus="false" active="true" content-source="as:6480153153182230586:" mode="xquery">xquery version "1.0-ml";

(: 194.150.245.142 
cts:search(doc(), cts:element-value-query(xs:QName("network"), "194.150.24*", "wildcarded"))
:)
(:
2658434, 2659272 :)

cts:search((//GeoLite2-City-Locations-en), cts:element-value-query(xs:QName("geoname_id"),  ("2658434", "2659272")  ))</query><query name="Query 8" focus="true" active="true" content-source="as:6480153153182230586:" mode="xquery">xquery version "1.0-ml";

declare variable $IPv4 as xs:string+ := ("43.230.176.243", "212.58.246.93", "139.130.4.5", "54.240.195.68", "74.125.224.72", 
"151.111.166.96", "170.149.161.130", "54.240.254.230", "78.41.128.140", "62.138.116.25", "54.239.54.107", "95.130.42.33", 
"147.67.119.103", "205.193.215.159", "31.192.231.167", "195.66.10.19", "193.146.141.234", "54.239.38.117", "54.239.96.90", 
"177.72.244.194", "52.95.193.28", "54.240.226.81", "52.95.80.34", "194.150.245.142", "12.48.40.0");

(: declare variable $IP as xs:string := "12.48.40.0"; :)

declare function local:convert-ip-to-integer($ip as xs:string) as xs:integer {
  (: TODO - IP v4 is a predictable datatype - XML Schema for this as a simple type? :)
  let $i := fn:reverse(fn:tokenize($ip, "\."))
  return xs:integer($i[1]) + xs:integer($i[2]) * 256 + xs:integer($i[3]) * 256 * 256 + xs:integer($i[4]) * 256 * 256 * 256
};

declare function local:convert-integer-to-ip($int as xs:integer) as xs:string {
(: TODO - this is a bit broken still - there's a situation where the hex is wrong if the ip ends in "0"|| :)
  let $i := xdmp:integer-to-hex($int) 
  return
  fn:string-join(
    (xs:string(xdmp:hex-to-integer(fn:substring($i, 1, 2))),
     xs:string(xdmp:hex-to-integer(fn:substring($i, 3, 2))), 
     xs:string(xdmp:hex-to-integer(fn:substring($i, 5, 2))), 
     xs:string(xdmp:hex-to-integer(fn:substring($i, 7, 2)))
    ), "."
  ) 
};

for $i in $IPv4 
return 
  text {$i, " ", local:convert-ip-to-integer($i), " ", local:convert-integer-to-ip(local:convert-ip-to-integer($i)), " ", ($i eq local:convert-integer-to-ip(local:convert-ip-to-integer($i)))}
  </query></workspace></export>
